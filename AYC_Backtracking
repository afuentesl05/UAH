#PRÁCTICA 5 BACKTRACKING

#EJERCICIO 1

"""
Se tienen N elementos distintos almacenados en una estructura de acceso directo (por
ejemplo, un vector con los números 1, 2, 3, 4 y 5, o la cadena abcdefg) y se quiere obtener
todas las formas distintas de colocar esos elementos, es decir, hay que conseguir todas las
permutaciones de los N elementos. Diseñar un algoritmo que use Backtracking para
resolver el problema.
"""
# Procedimiento para generar todas las permutaciones
def GenerarPermutaciones(entrada, salida, validos, k):
    if k > len(entrada):
        print(salida)  # Imprimir la permutación encontrada
    else:
        for i in range(len(entrada)):
            if validos[i]:
                validos[i] = False
                salida[k - 1] = entrada[i]
                GenerarPermutaciones(entrada, salida, validos, k + 1)
                validos[i] = True

#PROBADOR EJERCICIO 1
#entrada = [1, 2, 3, 4]  # Entrada de datos
#validos = [True] * len(entrada)  # Array de booleanos inicializados como True
#salida = [0] * len(entrada)  # Array de enteros inicializados con ceros

#GenerarPermutaciones(entrada, salida, validos, 1)


#EJERCICIO 2
"""
Resolver el problema anterior considerando la posibilidad de que los elementos se repitan
entre sí (por ejemplo, el vector 1, 2, 3, 1 o la cadena acabada).
"""

def intercambiar(entrada, i, j):
    entrada[i], entrada[j] = entrada[j], entrada[i]

def ejercicio2(entrada, salida, k):
    if k >= N:
        print(salida)
    else:
        for i in range(k, N):
            saltar_iteracion = 0
            for j in range(k, i):
                if entrada[i] == entrada[j]:
                    saltar_iteracion = 1
                    break
            if saltar_iteracion == 0:
                salida[k] = entrada[i]
                entrada = list(entrada)  # Convertir entrada en una lista mutable
                intercambiar(entrada, i, k)
                ejercicio2(entrada, salida, k + 1)
                intercambiar(entrada, k, i)


#PROBADOR EJERCICIO 2
#N = 4  # Asigna el valor de N
#entrada = [1,2,3,1]  # Asigna los valores de entrada
#salida = [0] * N  # Inicializa la lista de salida con N ceros
#ejercicio2(entrada, salida, 0)


#EJERCICIO 3
"""
Se tiene un número de Tam cifras almacenado en una cadena de texto; por ejemplo, la
cadena dato = 1151451.
Diseñar un algoritmo que mediante técnicas de Backtracking encuentre, de la manera más
eficiente posible, todos los números distintos de N cifras que puedan formarse con los
números de la cadena sin alterar su orden relativo dentro de la misma.
Por ejemplo, si N = 4, son números válidos 1151, 1511 y 1541, pero no 4551 o 5411 que
aunque pueden formarse con los dígitos de la cadena dato implican una reordenación.
"""

def backtracking_numeros(N, cadena):
    """ N, cadena --> int, str
    OBJ: esta función recibe como parámetros N, que es la longitud de las combinaciones posibles, y la cadena de números
    con la que realizar las combinaciones.
    """
    def backtrack(comb, index):
        """
        """
        nonlocal visitados # variable para ambas funciones (nonlocal)
        if len(comb) == N:
            visitados.add(comb) # se asegura que no se añadan repetidos (el add para conjuntos no añade duplicados)
            return
        if index == len(cadena): # si el índice coincide con el final de la cadena, ya no se pueden añadir más elementos 
            return
        for i in range(index, len(cadena)): # en el rango de tantos carácteres numéricos tenga la cadena 
            backtrack(comb + cadena[i], i + 1) # llamada recursiva añadiendo a la combinación el siguiente carácter y moviendo el índice 1 a la derecha

    visitados = set() #estableces un conjunto vacío
    backtrack('', 0) #primera llamada recursiva de bakctrack con cadena vacia y el primer índice de la cadena (0)
    return visitados

# PROBADOR EJERCICIO 3  
"""
N = 2
cadena = '1151451'
resultados = backtracking_numeros(N, cadena)
print("Números válidos de", N, "cifras:", resultados)
"""

#EJERCICIO 5

"""
Se dispone de una tabla Laberinto[1..n,1..m] con valores lógicos que representa un
Laberinto.
El valor TRUE indica la existencia de una pared (no se puede atravesar), mientras que
FALSE representa una casilla recorrible.
Para moverse por el Laberinto, a partir de una casilla se puede desplazar horizontal o
verticalmente, pero solo a una casilla vacía (FALSE). Los bordes de la tabla están
completamente a TRUE excepto una casilla, que es la salida del Laberinto. Diseñar un
algoritmo Backtracking que encuentre todos los caminos posibles que llevan a la salida
desde una casilla inicial determinada, si es posible salir del Laberinto.

Diseñar un algoritmo Backtracking que encuentre el mejor camino posible que lleve a la
salida desde una casilla inicial determinada, si es posible salir del Laberinto.

Teniendo en cuenta que:
'#' -> pared
'O' -> origen
'S' -> salida
'.' -> recorrido
"""

def recorrer(Laberinto, i, j):
    #Comprobamos si estamos en la salida
    if(Laberinto[i][j]=='S'):
        print(Laberinto)
        Laberinto[i][j] = 'S'
        return 
    else:
        Laberinto[i][j] = '.' #Empezamos el camino
        #Mirar la casilla de la izquierda o salida
        if(i-1 < 0 and i-1 < len(Laberinto[i]) and (Laberinto[i-1][j] ==' ' or  Laberinto[i-1][j] =='S')):
            recorrer(Laberinto, i-1, j)
        #arriba o salida
        if(j+1>=0 and j+1<len(Laberinto[i]) and (Laberinto[i][j+1]==' ' or Laberinto[i][j+1]=='S')):
            recorrer(Laberinto, i, j+1)
        #derecha o salida
        if(i+1>=0 and i+1<len(Laberinto[i]) and (Laberinto[i+1][j]==' ' or Laberinto[i+1][j]=='S')):
            recorrer(Laberinto, i+1, j)
        #abajo o salida
        if(j-1>=0 and j-1<len(Laberinto) and (Laberinto[i][j-1]==' ' or Laberinto[i][j-1]=='S')):
            recorrer(Laberinto, i, j-1)
        Laberinto[i][j]=' ' #Se desmarca el camino
    
#PROBADOR EJERCICIO 5 (LABERINTO)
laberinto = [
        ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', 'O', ' ', ' ', '#', ' ', ' ', ' ', '#'],
        ['#', ' ', '#', ' ', '#', ' ', '#', ' ', '#'],
        ['#', ' ', '#', ' ', '#', ' ', '#', ' ', '#'],
        ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
        ['#', '#', '#', '#', '#', '#', '#', 'S', '#']
]
    
#print("\nRecorrido:")
#recorrer(laberinto, 1, 1)
    
#EJERCICIO 6
"""
Se tiene la tabla de sustitución que aparece a continuación:


que se usa de la manera siguiente: en una cadena cualquiera, dos caracteres consecutivos
se pueden sustituir por el valor que aparece en la tabla, utilizando el primer carácter como
fila y el segundo carácter como columna. Por ejemplo, se puede cambiar la secuencia ca
por una b, ya que M[c,a]=b.

Implementar un algoritmo Backtracking que, a partir de una cadena no vacía texto y
utilizando la información almacenada en una tabla de sustitución M, sea capaz de
encontrar la forma de realizar las sustituciones que permite reducir la cadena texto a un
carácter final, si es posible.

Ejemplo: Con la cadena texto=acabada y el carácter final=d, una posible forma de
sustitución es la siguiente (las secuencias que se sustituyen se marcan para mayor
claridad): acabada  acacda  abcda  abcd  bcd  bc  d.
"""

def sustituir(cadena, M, final, visitados):
    # Si la cadena ya es igual al carácter final, retornamos la cadena
    if cadena == final:
        return cadena
    # Recorremos la cadena
    for i in range(len(cadena)-1):
        # Formamos el par de caracteres a sustituir
        par = cadena[i:i+2] 
        # Verificamos si el par está en la tabla de sustitución
        if par in M:
            # Sustituimos el par por el valor correspondiente en la tabla de sustitución
            nueva_cadena = cadena[:i] + M[par] + cadena[i+2:]
            # Si la nueva cadena no ha sido visitada antes
            if nueva_cadena not in visitados: 
                # Agregamos la nueva cadena a la lista de visitados
                visitados.add(nueva_cadena)
                # Llamamos recursivamente a la función con la nueva cadena
                resultado = sustituir(nueva_cadena, M, final, visitados)
                # Si se encuentra una solución, retornamos la cadena resultante
                if resultado:
                    return resultado
    # Si no se encontró ninguna solución, retornamos None
    return None 

# Ejemplo de uso
texto = "acabad"
final = "d"
M = {"aa":"b", "ab": "b", "ac": "a", "ad": "d", "ba": "c", "bb": "a", "bc": "d", "bd": "a", "ca": "b", "cb": "a", "cc": "c", "cd": "c", "da": "d", "db": "c", "dc": "d", "dd": "b"}
visitados = set() 
resultado = sustituir(texto, M, final, visitados)
if resultado:
    print("Cadena reducida a un solo carácter:", resultado)
else:
    print("No se encontró solución")










